---
title: "Second: A Pure Python qmd"
format: html
---

This is a pure Python qmd document. Since there are no R code chunks, it is executed via the Jupyter kernel.

## Adding days per month from date range to a dataframe

Suppose you have a dataset with a column of start dates and column of end dates. For example:

```{python}
import pandas as pd
import calendar

date_df = pd.DataFrame({
    "START_TM": ['2/15/2010', '2/15/2010', '3/16/2010'],
    "END_TM": ['4/18/2010', '2/18/2010', '5/20/2010']
})
date_df["START_TM"] = date_df["START_TM"].astype('datetime64')
date_df["END_TM"] = date_df["END_TM"].astype('datetime64')
date_df
```

Our goal is to count the number of days in each month this range of dates falls over.

We start by adding columns for each month:

```{python}
months = {calendar.month_name[i]:[0 for _ in range(date_df.shape[0])] for i in range(1, 13)}
for m in months:
    date_df[m] = [0 for _ in range(date_df.shape[0])]
date_df
```

### Helper functions

```{python}
def insert_days_per_month(outer_row):
    dpm = days_per_month(outer_row)
    for index, inner_row in dpm.iterrows():
        outer_row[inner_row['Month']] = inner_row['NumDays']
    return(outer_row)

def days_per_month(row):
    s = pd.Series(index = pd.date_range(row[0], row[1]))[1: ] 
    days_in_month = s.resample('MS').size().to_period('m').\
    rename_axis('Month').reset_index(name = 'NumDays')
    days_in_month['Month'] = days_in_month['Month'].apply(
        lambda x: calendar.month_name[x.month])
    return(days_in_month)
```

We can get the desired result with apply:

```{python}
date_df = date_df.apply(lambda x: insert_days_per_month(x), axis = 1)
date_df
```

## Interactive Widgets

Quarto has support for interactive documents. Supported formats include:

-   JavaScript: Observable JS

-   R: Shiny

-   Python: Jupyter Widgets are all supported, such as IPyLeaflet and Plotly

## IPyLeaflet

```{python}
from ipyleaflet import Map, Marker

good_eats = {
  "Cham Soot Gol": (33.772819, -117.9694484),
  "The Boiling Crab": (33.6996179, -117.8905689),
  "Tan Hoang Huong": (33.7446965, -117.9629173)
}

cham_soot_gol = Map(center=good_eats["Cham Soot Gol"], scroll_wheel_zoom=True)
for place in good_eats:
  cham_soot_gol.add_layer(Marker(location=good_eats[place], title=place))
cham_soot_gol
```

Can do everything you're used to with Python but with the awesome Visual Editor stuff:

## Plotly

```{python}
import plotly.express as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", 
                 color="species", 
                 marginal_y="violin", marginal_x="box", 
                 trendline="ols", template="simple_white")
fig.show()
```
