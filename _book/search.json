[
  {
    "href": "index.html#installing-quarto",
    "title": "Example Quarto Site for R",
    "section": "Installing Quarto",
    "text": "In order to work with Quarto from your own computer, you’ll need to install the Quarto CLI and a daily build of RStudio.\n\nYou can download the latest version of the Quarto CLI from the Quarto github. Select the appropriate version for your OS and run the installer.\nYou can download a daily build of RStudio here. The daily build has support for Quarto documents that isn’t in the official release yet.\n\nFrom here, you’ll be able to render Quarto documents in RStudio just like you’ve been doing today.\nFor full installation instructions, see the Quarto docs."
  },
  {
    "href": "index.html#about-this-site",
    "title": "Example Quarto Site for R",
    "section": "About this site",
    "text": "This is a Quarto book project. You’re able to download the entire site as a single document by clicking the download button in the upper right hand corner.\nA Quarto project is a collection of documents (qmd, md, Rmd, and ipynb files) that are unified by a _quarto.yml file. This _quarto.yml file contains, among other things (from the docs):\n\nA way to render all or some of the files in a directory with a single command (e.g. quarto render myproject).\nA way to share YAML configuration across multiple documents.\nThe ability to redirect output artifacts to another directory.\nThe ability to freeze rendered output (i.e. don’t re-execute documents unless they have changed).\n\nYou can see the _quarto.yml for this site here.\nTo learn more about Quarto projects, see the Projects section of the docs.\n\n\nSource Code\n---\ntitle: \"Introduction\"\n---\n\nThis is an example Quarto project made for the Reproducible Research with R workshop at the R/Medicine conference on 8/25/2021. \n\n## Installing Quarto\n\nIn order to work with Quarto from your own computer, you'll need to install the Quarto CLI and a daily build of RStudio.\n\n* You can download the latest version of the Quarto CLI from the [Quarto github](https://github.com/quarto-dev/quarto-cli/releases/latest). Select the appropriate version for your OS and run the installer.\n* You can download a daily build of RStudio [here](https://dailies.rstudio.com/). The daily build has support for Quarto documents that isn't in the official release yet.\n\nFrom here, you'll be able to render Quarto documents in RStudio just like you've been doing today.\n\nFor full installation instructions, see [the Quarto docs](https://quarto.org/docs/getting-started/installation.html).\n\n## About this site\n\nThis is a Quarto `book` project. \nYou're able to download the entire site as a single document by clicking the download button in the upper right hand corner. \n\nA Quarto project is a collection of documents (`qmd`, `md`, `Rmd`, and `ipynb` files) that are unified by a `_quarto.yml` file. This `_quarto.yml` file contains, among other things (from the docs):\n\n* A way to render all or some of the files in a directory with a single command (e.g. quarto render myproject).\n* A way to share YAML configuration across multiple documents.\n* The ability to redirect output artifacts to another directory.\n* The ability to freeze rendered output (i.e. don’t re-execute documents unless they have changed).\n\nYou can see the `_quarto.yml` for this site [here](https://github.com/pommevilla/r3-quarto-example/blob/main/_quarto.yml).\n\nTo learn more about Quarto projects, see the [Projects section](https://quarto.org/docs/projects/quarto-projects.html) of the docs."
  },
  {
    "href": "docs\\first.html#math-stuff",
    "title": "A qmd with R and Python",
    "section": "Math stuff",
    "text": "We can also write math stuff! For example, here is a definition:\n\nDefinition 3.1 (Continuity) The function \\(f: \\mathbb{R}^n \\to \\mathbb{R}^m\\) is continuous at a point \\(x \\in \\mathbb{R}^n\\) if for all \\(\\varepsilon > 0\\) there exists \\(\\delta > 0\\) such that if \\(|x - x_0| < \\delta\\), then \\(|f(x) - f(x_0)| < \\varepsilon\\). If this is true for all such \\(x\\) in the domain of \\(f\\), we say that \\(f\\) is a continuous function."
  },
  {
    "href": "docs\\first.html#example",
    "title": "A qmd with R and Python",
    "section": "Example",
    "text": "Define \\(f: \\mathbb{R} \\to \\mathbb{R}\\) by:\n\\[\nf(x) = \\begin{cases}\n1, x \\in \\mathbb{Q},\\\\\n0, x \\not\\in \\mathbb{Q}\n\\end{cases}\n\\]\nProve that \\(f\\) is not a continuous function."
  },
  {
    "href": "docs\\first.html#adding-references",
    "title": "A qmd with R and Python",
    "section": "Adding references",
    "text": "We can also add references. For instance, the following definition of \\(k\\)-partially colored comes from this paper: (Blair et al. 2020)\n\nDefinition 3.2 (\\(k\\)-partially colored) Let \\(D\\) be a diagram of a link \\(L\\) with \\(n\\) crossings. We call \\(D\\) \\(k\\)-partially colored if we have specified a subset \\(A\\) of the strands of \\(D\\) and a function \\(f:\\to \\{1, 2, \\dots, k\\}\\). We refer to this partial coloring by the tuple \\((A, f)\\). Given \\(k\\)-partial colorings \\((A_1, f_1)\\) and \\((A_2, f_2)\\) of \\(D\\), we say \\((A_2, f_2)\\) is the result of a coloring move on \\((A_1, f_1)\\) if\n\n\\(A_1 \\subset A_2\\) and \\(A_2 \\ A_1 = \\{s_j\\}\\) for some strand \\(s_j\\) in \\(D\\);\n\\(f_2|_{A_1} = f_1\\);\n\\(s_j\\) is adjacent to \\(s_i\\) at some crossing \\(c \\in v(D)\\), and \\(s_i \\in A_1\\);\nthe over-strand \\(s_k\\) at \\(c\\) is an element of \\(A_1\\);\n\\(f_1(s_i) = f_2(s_j)\\)."
  },
  {
    "href": "docs\\first.html#cross-references",
    "title": "A qmd with R and Python",
    "section": "Cross-references",
    "text": "Along the way, we’ve been giving each of the items above labels. The Visual Editor knows about these labels and we can call them up for cross referencing. For example:\n\nWe were pretty happy about the standard curves in fig. fig-std-curves\nI love heatmaps like fig. fig-tiles\ndef. def-merid-coloring is trivially true for the unknot."
  },
  {
    "href": "docs\\second.html#adding-days-per-month-from-date-range-to-a-dataframe",
    "title": "A qmd with only Python",
    "section": "Adding days per month from date range to a dataframe",
    "text": "Suppose you have a dataset with a column of start dates and column of end dates. For example:\n\nimport pandas as pd\nimport calendar\n\ndate_df = pd.DataFrame({\n    \"START_TM\": ['2/15/2010', '2/15/2010', '3/16/2010'],\n    \"END_TM\": ['4/18/2010', '2/18/2010', '5/20/2010']\n})\ndate_df[\"START_TM\"] = date_df[\"START_TM\"].astype('datetime64')\ndate_df[\"END_TM\"] = date_df[\"END_TM\"].astype('datetime64')\ndate_df\n\n\n\n\n  \n    \n      \n      START_TM\n      END_TM\n    \n  \n  \n    \n      0\n      2010-02-15\n      2010-04-18\n    \n    \n      1\n      2010-02-15\n      2010-02-18\n    \n    \n      2\n      2010-03-16\n      2010-05-20\n    \n  \n\n\n\n\nOur goal is to count the number of days in each month this range of dates falls over.\nWe start by adding columns for each month:\n\nmonths = {calendar.month_name[i]:[0 for _ in range(date_df.shape[0])] for i in range(1, 13)}\nfor m in months:\n    date_df[m] = [0 for _ in range(date_df.shape[0])]\ndate_df\n\n\n\n\n  \n    \n      \n      START_TM\n      END_TM\n      January\n      February\n      March\n      April\n      May\n      June\n      July\n      August\n      September\n      October\n      November\n      December\n    \n  \n  \n    \n      0\n      2010-02-15\n      2010-04-18\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      1\n      2010-02-15\n      2010-02-18\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      2\n      2010-03-16\n      2010-05-20\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n  \n\n\n\n\n\nHelper functions\n\ndef insert_days_per_month(outer_row):\n    dpm = days_per_month(outer_row)\n    for index, inner_row in dpm.iterrows():\n        outer_row[inner_row['Month']] = inner_row['NumDays']\n    return(outer_row)\n\ndef days_per_month(row):\n    s = pd.Series(index = pd.date_range(row[0], row[1]))[1: ] \n    days_in_month = s.resample('MS').size().to_period('m').\\\n    rename_axis('Month').reset_index(name = 'NumDays')\n    days_in_month['Month'] = days_in_month['Month'].apply(\n        lambda x: calendar.month_name[x.month])\n    return(days_in_month)\n\nWe can get the desired result with apply:\n\ndate_df = date_df.apply(lambda x: insert_days_per_month(x), axis = 1)\ndate_df\n\n\n\n\n  \n    \n      \n      START_TM\n      END_TM\n      January\n      February\n      March\n      April\n      May\n      June\n      July\n      August\n      September\n      October\n      November\n      December\n    \n  \n  \n    \n      0\n      2010-02-15\n      2010-04-18\n      0\n      13\n      31\n      18\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      1\n      2010-02-15\n      2010-02-18\n      0\n      3\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n      0\n    \n    \n      2\n      2010-03-16\n      2010-05-20\n      0\n      0\n      15\n      30\n      20\n      0\n      0\n      0\n      0\n      0\n      0\n      0"
  },
  {
    "href": "docs\\second.html#interactive-widgets",
    "title": "A qmd with only Python",
    "section": "Interactive Widgets",
    "text": "Quarto has support for interactive documents. Supported formats include:\n\nJavaScript: Observable JS\nR: Shiny\nPython: Jupyter Widgets are all supported, such as IPyLeaflet and Plotly\n\nHere are some examples:"
  },
  {
    "href": "docs\\second.html#ipyleaflet",
    "title": "A qmd with only Python",
    "section": "IPyLeaflet",
    "text": "from ipyleaflet import Map, Marker\n\ngood_eats = {\n  \"Cham Soot Gol\": (33.772819, -117.9694484),\n  \"The Boiling Crab\": (33.6996179, -117.8905689),\n  \"Tan Hoang Huong\": (33.7446965, -117.9629173)\n}\n\ncham_soot_gol = Map(center=good_eats[\"Cham Soot Gol\"], scroll_wheel_zoom=True)\nfor place in good_eats:\n  cham_soot_gol.add_layer(Marker(location=good_eats[place], title=place))\ncham_soot_gol\n\n\n{\"model_id\":\"2087e9d0e19e453aa2eb46f94cf9d89f\",\"version_major\":2,\"version_minor\":0}"
  },
  {
    "href": "docs\\second.html#plotly",
    "title": "A qmd with only Python",
    "section": "Plotly",
    "text": "import plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", \n                 trendline=\"ols\", template=\"simple_white\")\nfig.show()\n\n                                                        require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"c5bb13a7-e829-4eeb-9bf4-67c7c093af75\")) {                    Plotly.newPlot(                        \"c5bb13a7-e829-4eeb-9bf4-67c7c093af75\",                        [{\"hovertemplate\":\"species=setosa<br>sepal_width=%{x}<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"setosa\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"setosa\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"scatter\",\"x\":[3.5,3.0,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3.0,3.0,4.0,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3.0,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.1,3.0,3.4,3.5,2.3,3.2,3.5,3.8,3.0,3.8,3.2,3.7,3.3],\"xaxis\":\"x\",\"y\":[5.1,4.9,4.7,4.6,5.0,5.4,4.6,5.0,4.4,4.9,5.4,4.8,4.8,4.3,5.8,5.7,5.4,5.1,5.7,5.1,5.4,5.1,4.6,5.1,4.8,5.0,5.0,5.2,5.2,4.7,4.8,5.4,5.2,5.5,4.9,5.0,5.5,4.9,4.4,5.1,5.0,4.5,4.4,5.0,5.1,4.8,5.1,4.6,5.3,5.0],\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=setosa<br>sepal_width=%{x}<extra></extra>\",\"legendgroup\":\"setosa\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"name\":\"setosa\",\"notched\":true,\"offsetgroup\":\"setosa\",\"showlegend\":false,\"type\":\"box\",\"x\":[3.5,3.0,3.2,3.1,3.6,3.9,3.4,3.4,2.9,3.1,3.7,3.4,3.0,3.0,4.0,4.4,3.9,3.5,3.8,3.8,3.4,3.7,3.6,3.3,3.4,3.0,3.4,3.5,3.4,3.2,3.1,3.4,4.1,4.2,3.1,3.2,3.5,3.1,3.0,3.4,3.5,2.3,3.2,3.5,3.8,3.0,3.8,3.2,3.7,3.3],\"xaxis\":\"x3\",\"yaxis\":\"y3\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=setosa<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"setosa\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"name\":\"setosa\",\"offsetgroup\":\"setosa\",\"scalegroup\":\"y\",\"showlegend\":false,\"type\":\"violin\",\"xaxis\":\"x2\",\"y\":[5.1,4.9,4.7,4.6,5.0,5.4,4.6,5.0,4.4,4.9,5.4,4.8,4.8,4.3,5.8,5.7,5.4,5.1,5.7,5.1,5.4,5.1,4.6,5.1,4.8,5.0,5.0,5.2,5.2,4.7,4.8,5.4,5.2,5.5,4.9,5.0,5.5,4.9,4.4,5.1,5.0,4.5,4.4,5.0,5.1,4.8,5.1,4.6,5.3,5.0],\"yaxis\":\"y2\"},{\"hovertemplate\":\"<b>OLS trendline</b><br>sepal_length = 0.690854 * sepal_width + 2.64466<br>R<sup>2</sup>=0.557681<br><br>species=setosa<br>sepal_width=%{x}<br>sepal_length=%{y} <b>(trend)</b><extra></extra>\",\"legendgroup\":\"setosa\",\"marker\":{\"color\":\"#1F77B4\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"setosa\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[2.3,2.9,3.0,3.0,3.0,3.0,3.0,3.0,3.1,3.1,3.1,3.1,3.1,3.2,3.2,3.2,3.2,3.2,3.3,3.3,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.4,3.5,3.5,3.5,3.5,3.5,3.5,3.6,3.6,3.7,3.7,3.7,3.8,3.8,3.8,3.8,3.9,3.9,4.0,4.1,4.2,4.4],\"xaxis\":\"x\",\"y\":[4.233624785627936,4.648137423036916,4.717222862605079,4.717222862605079,4.717222862605079,4.717222862605079,4.717222862605079,4.717222862605079,4.786308302173243,4.786308302173243,4.786308302173243,4.786308302173243,4.786308302173243,4.8553937417414055,4.8553937417414055,4.8553937417414055,4.8553937417414055,4.8553937417414055,4.92447918130957,4.92447918130957,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,4.9935646208777325,5.062650060445896,5.062650060445896,5.062650060445896,5.062650060445896,5.062650060445896,5.062650060445896,5.131735500014059,5.131735500014059,5.200820939582222,5.200820939582222,5.200820939582222,5.269906379150386,5.269906379150386,5.269906379150386,5.269906379150386,5.338991818718549,5.338991818718549,5.4080772582867125,5.477162697854876,5.546248137423039,5.6844190165593655],\"yaxis\":\"y\"},{\"hovertemplate\":\"species=versicolor<br>sepal_width=%{x}<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"versicolor\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"versicolor\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"scatter\",\"x\":[3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2.0,3.0,2.2,2.9,2.9,3.1,3.0,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3.0,2.8,3.0,2.9,2.6,2.4,2.4,2.7,2.7,3.0,3.4,3.1,2.3,3.0,2.5,2.6,3.0,2.6,2.3,2.7,3.0,2.9,2.9,2.5,2.8],\"xaxis\":\"x\",\"y\":[7.0,6.4,6.9,5.5,6.5,5.7,6.3,4.9,6.6,5.2,5.0,5.9,6.0,6.1,5.6,6.7,5.6,5.8,6.2,5.6,5.9,6.1,6.3,6.1,6.4,6.6,6.8,6.7,6.0,5.7,5.5,5.5,5.8,6.0,5.4,6.0,6.7,6.3,5.6,5.5,5.5,6.1,5.8,5.0,5.6,5.7,5.7,6.2,5.1,5.7],\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=versicolor<br>sepal_width=%{x}<extra></extra>\",\"legendgroup\":\"versicolor\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"name\":\"versicolor\",\"notched\":true,\"offsetgroup\":\"versicolor\",\"showlegend\":false,\"type\":\"box\",\"x\":[3.2,3.2,3.1,2.3,2.8,2.8,3.3,2.4,2.9,2.7,2.0,3.0,2.2,2.9,2.9,3.1,3.0,2.7,2.2,2.5,3.2,2.8,2.5,2.8,2.9,3.0,2.8,3.0,2.9,2.6,2.4,2.4,2.7,2.7,3.0,3.4,3.1,2.3,3.0,2.5,2.6,3.0,2.6,2.3,2.7,3.0,2.9,2.9,2.5,2.8],\"xaxis\":\"x3\",\"yaxis\":\"y3\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=versicolor<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"versicolor\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"name\":\"versicolor\",\"offsetgroup\":\"versicolor\",\"scalegroup\":\"y\",\"showlegend\":false,\"type\":\"violin\",\"xaxis\":\"x2\",\"y\":[7.0,6.4,6.9,5.5,6.5,5.7,6.3,4.9,6.6,5.2,5.0,5.9,6.0,6.1,5.6,6.7,5.6,5.8,6.2,5.6,5.9,6.1,6.3,6.1,6.4,6.6,6.8,6.7,6.0,5.7,5.5,5.5,5.8,6.0,5.4,6.0,6.7,6.3,5.6,5.5,5.5,6.1,5.8,5.0,5.6,5.7,5.7,6.2,5.1,5.7],\"yaxis\":\"y2\"},{\"hovertemplate\":\"<b>OLS trendline</b><br>sepal_length = 0.865078 * sepal_width + 3.53973<br>R<sup>2</sup>=0.276582<br><br>species=versicolor<br>sepal_width=%{x}<br>sepal_length=%{y} <b>(trend)</b><extra></extra>\",\"legendgroup\":\"versicolor\",\"marker\":{\"color\":\"#FF7F0E\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"versicolor\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[2.0,2.2,2.2,2.3,2.3,2.3,2.4,2.4,2.4,2.5,2.5,2.5,2.5,2.6,2.6,2.6,2.7,2.7,2.7,2.7,2.7,2.8,2.8,2.8,2.8,2.8,2.8,2.9,2.9,2.9,2.9,2.9,2.9,2.9,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.1,3.1,3.1,3.2,3.2,3.2,3.3,3.4],\"xaxis\":\"x\",\"y\":[5.26989015544041,5.4429056994818605,5.4429056994818605,5.529413471502586,5.529413471502586,5.529413471502586,5.615921243523311,5.615921243523311,5.615921243523311,5.702429015544037,5.702429015544037,5.702429015544037,5.702429015544037,5.7889367875647615,5.7889367875647615,5.7889367875647615,5.875444559585487,5.875444559585487,5.875444559585487,5.875444559585487,5.875444559585487,5.961952331606212,5.961952331606212,5.961952331606212,5.961952331606212,5.961952331606212,5.961952331606212,6.048460103626938,6.048460103626938,6.048460103626938,6.048460103626938,6.048460103626938,6.048460103626938,6.048460103626938,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.134967875647662,6.221475647668388,6.221475647668388,6.221475647668388,6.307983419689114,6.307983419689114,6.307983419689114,6.394491191709839,6.480998963730563],\"yaxis\":\"y\"},{\"hovertemplate\":\"species=virginica<br>sepal_width=%{x}<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"virginica\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"virginica\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"scatter\",\"x\":[3.3,2.7,3.0,2.9,3.0,3.0,2.5,2.9,2.5,3.6,3.2,2.7,3.0,2.5,2.8,3.2,3.0,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3.0,2.8,3.0,2.8,3.8,2.8,2.8,2.6,3.0,3.4,3.1,3.0,3.1,3.1,3.1,2.7,3.2,3.3,3.0,2.5,3.0,3.4,3.0],\"xaxis\":\"x\",\"y\":[6.3,5.8,7.1,6.3,6.5,7.6,4.9,7.3,6.7,7.2,6.5,6.4,6.8,5.7,5.8,6.4,6.5,7.7,7.7,6.0,6.9,5.6,7.7,6.3,6.7,7.2,6.2,6.1,6.4,7.2,7.4,7.9,6.4,6.3,6.1,7.7,6.3,6.4,6.0,6.9,6.7,6.9,5.8,6.8,6.7,6.7,6.3,6.5,6.2,5.9],\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=virginica<br>sepal_width=%{x}<extra></extra>\",\"legendgroup\":\"virginica\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"name\":\"virginica\",\"notched\":true,\"offsetgroup\":\"virginica\",\"showlegend\":false,\"type\":\"box\",\"x\":[3.3,2.7,3.0,2.9,3.0,3.0,2.5,2.9,2.5,3.6,3.2,2.7,3.0,2.5,2.8,3.2,3.0,3.8,2.6,2.2,3.2,2.8,2.8,2.7,3.3,3.2,2.8,3.0,2.8,3.0,2.8,3.8,2.8,2.8,2.6,3.0,3.4,3.1,3.0,3.1,3.1,3.1,2.7,3.2,3.3,3.0,2.5,3.0,3.4,3.0],\"xaxis\":\"x3\",\"yaxis\":\"y3\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"species=virginica<br>sepal_length=%{y}<extra></extra>\",\"legendgroup\":\"virginica\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"name\":\"virginica\",\"offsetgroup\":\"virginica\",\"scalegroup\":\"y\",\"showlegend\":false,\"type\":\"violin\",\"xaxis\":\"x2\",\"y\":[6.3,5.8,7.1,6.3,6.5,7.6,4.9,7.3,6.7,7.2,6.5,6.4,6.8,5.7,5.8,6.4,6.5,7.7,7.7,6.0,6.9,5.6,7.7,6.3,6.7,7.2,6.2,6.1,6.4,7.2,7.4,7.9,6.4,6.3,6.1,7.7,6.3,6.4,6.0,6.9,6.7,6.9,5.8,6.8,6.7,6.7,6.3,6.5,6.2,5.9],\"yaxis\":\"y2\"},{\"hovertemplate\":\"<b>OLS trendline</b><br>sepal_length = 0.901534 * sepal_width + 3.90684<br>R<sup>2</sup>=0.209057<br><br>species=virginica<br>sepal_width=%{x}<br>sepal_length=%{y} <b>(trend)</b><extra></extra>\",\"legendgroup\":\"virginica\",\"marker\":{\"color\":\"#2CA02C\",\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"virginica\",\"showlegend\":false,\"type\":\"scatter\",\"x\":[2.2,2.5,2.5,2.5,2.5,2.6,2.6,2.7,2.7,2.7,2.7,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.8,2.9,2.9,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.1,3.1,3.1,3.1,3.2,3.2,3.2,3.2,3.2,3.3,3.3,3.3,3.4,3.4,3.6,3.8,3.8],\"xaxis\":\"x\",\"y\":[5.8902123150582755,6.160672658058943,6.160672658058943,6.160672658058943,6.160672658058943,6.250826105725833,6.250826105725833,6.340979553392723,6.340979553392723,6.340979553392723,6.340979553392723,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.431133001059611,6.521286448726501,6.521286448726501,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.6114398963933905,6.70159334406028,6.70159334406028,6.70159334406028,6.70159334406028,6.791746791727169,6.791746791727169,6.791746791727169,6.791746791727169,6.791746791727169,6.881900239394058,6.881900239394058,6.881900239394058,6.9720536870609475,6.9720536870609475,7.152360582394726,7.332667477728505,7.332667477728505],\"yaxis\":\"y\"}],                        {\"legend\":{\"title\":{\"text\":\"species\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"rgb(36,36,36)\"},\"error_y\":{\"color\":\"rgb(36,36,36)\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"rgb(36,36,36)\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"rgb(36,36,36)\"},\"baxis\":{\"endlinecolor\":\"rgb(36,36,36)\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"rgb(36,36,36)\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.6}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"rgb(237,237,237)\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"rgb(217,217,217)\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":1,\"tickcolor\":\"rgb(36,36,36)\",\"ticks\":\"outside\"}},\"colorscale\":{\"diverging\":[[0.0,\"rgb(103,0,31)\"],[0.1,\"rgb(178,24,43)\"],[0.2,\"rgb(214,96,77)\"],[0.3,\"rgb(244,165,130)\"],[0.4,\"rgb(253,219,199)\"],[0.5,\"rgb(247,247,247)\"],[0.6,\"rgb(209,229,240)\"],[0.7,\"rgb(146,197,222)\"],[0.8,\"rgb(67,147,195)\"],[0.9,\"rgb(33,102,172)\"],[1.0,\"rgb(5,48,97)\"]],\"sequential\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"sequentialminus\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"colorway\":[\"#1F77B4\",\"#FF7F0E\",\"#2CA02C\",\"#D62728\",\"#9467BD\",\"#8C564B\",\"#E377C2\",\"#7F7F7F\",\"#BCBD22\",\"#17BECF\"],\"font\":{\"color\":\"rgb(36,36,36)\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"rgb(232,232,232)\",\"gridwidth\":2,\"linecolor\":\"rgb(36,36,36)\",\"showbackground\":true,\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"rgb(232,232,232)\",\"gridwidth\":2,\"linecolor\":\"rgb(36,36,36)\",\"showbackground\":true,\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"rgb(232,232,232)\",\"gridwidth\":2,\"linecolor\":\"rgb(36,36,36)\",\"showbackground\":true,\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"}},\"shapedefaults\":{\"fillcolor\":\"black\",\"line\":{\"width\":0},\"opacity\":0.3},\"ternary\":{\"aaxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"},\"baxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"title\":{\"standoff\":15},\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"rgb(232,232,232)\",\"linecolor\":\"rgb(36,36,36)\",\"showgrid\":false,\"showline\":true,\"ticks\":\"outside\",\"title\":{\"standoff\":15},\"zeroline\":false,\"zerolinecolor\":\"rgb(36,36,36)\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,0.7363],\"title\":{\"text\":\"sepal_width\"}},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.7413,1.0],\"matches\":\"x2\",\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"},\"xaxis3\":{\"anchor\":\"y3\",\"domain\":[0.0,0.7363],\"matches\":\"x\",\"showticklabels\":false},\"xaxis4\":{\"anchor\":\"y4\",\"domain\":[0.7413,1.0],\"matches\":\"x2\",\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,0.7326],\"title\":{\"text\":\"sepal_length\"}},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.0,0.7326],\"matches\":\"y\",\"showticklabels\":false},\"yaxis3\":{\"anchor\":\"x3\",\"domain\":[0.7426,1.0],\"matches\":\"y3\",\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"},\"yaxis4\":{\"anchor\":\"x4\",\"domain\":[0.7426,1.0],\"matches\":\"y3\",\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('c5bb13a7-e829-4eeb-9bf4-67c7c093af75');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });"
  },
  {
    "href": "docs\\third.html",
    "title": "A Jupyter Notebook",
    "section": "",
    "text": "The editing experience with Jupyter Notebook is very similar to the RStudio editing experience: when we make changes and save them, the preview window opened by quarto preview (if your document is not in a project) and quarto serve (if it is) will update.\nHere’s some code:\n\nfor x in range(10):\n    print(f'{x} squared is {x ^2}.')\n\n0 squared is 2.\n1 squared is 3.\n2 squared is 0.\n3 squared is 1.\n4 squared is 6.\n5 squared is 7.\n6 squared is 4.\n7 squared is 5.\n8 squared is 10.\n9 squared is 11.\n\n\nWhat’s different about using Quarto to render Jupyter notebooks is that we can use Knitr code chunk options in the code cells. For example, we can use the label and fig.cap code chunk options in this cell below.\n#| fig-cap: \"A straight line projected into polar coordinates. \"\n#| label: fig-polar\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\n\nax.grid(True)\nplt.show()\n\n\n\n\nFigure 1: A straight line projected into polar coordinates.\n\n\n\n\nAnd we can add chunk options just like we did in RStudio.\n\nSee fig. fig-polar for an example of a projection of a straight line into polar coordinates.\n\n\nDNA String Stuff\nBelow are some functions to do some basic DNA string calculations. But this is a lot of function definitions and code testing that a lot of people probably don’t care about. We can hide the code beneath a fold using code-fold and provide a comment with code-summary:\n#| code-fold: true\n#| code-summary: \"Function definitions and doctests\"\n\n\nFunction definitions and doctests\nimport pandas as pd\ndef reverse_complement(nuc_sequence: str) -> str:\n    \"\"\"\n    Returns the reverse complement of a nucleotide sequence.\n    >>> reverse_complement('ACGT')\n    'ACGT'\n    >>> reverse_complement('ATCGTGCTGCTGTCGTCAAGAC')\n    'GTCTTGACGACAGCAGCACGAT'\n    >>> reverse_complement('TGCTAGCATCGAGTCGATCGATATATTTAGCATCAGCATT')\n    'AATGCTGATGCTAAATATATCGATCGACTCGATGCTAGCA'\n     \"\"\"\n    complements = {\n        \"A\": \"T\",\n        \"C\": \"G\",\n        \"G\": \"C\",\n        \"T\": \"A\"\n    }\n    rev_seq = \"\".join([complements[s] for s in nuc_sequence.upper()[::-1]])\n    return rev_seq\n\ndef gc_content(nuc_sequence: str) -> float:\n    \"\"\"\n    Calculates the GC content of a nucleotide sequence.\n    >>> gc_content('ACGT')\n    0.5\n    \"\"\"\n    gc_tally = 0\n    for nuc in nuc_sequence.lower():\n        if nuc == 'g' or nuc == 'c':\n            gc_tally += 1\n    return gc_tally / len(nuc_sequence)\n\ndef random_dna_string(seq_length: int = 10) -> str:\n    \"\"\"\n    Generates a random DNA string seq_length bp long\n    >>> len(random_dna_string())\n    10\n    >>> len(random_dna_string(20))\n    20\n    \"\"\"\n    from random import choice\n    \n    dna_string = \"\"\n    for _ in range(seq_length):\n        dna_string += choice(\"ACGT\")\n    return dna_string\n\ndef make_strings_df(num_strings: int = 10, str_length: int = 10) -> pd.DataFrame:\n    \"\"\"\n    Generates a pandas dataframe with num_strings DNA sequences of length str_length with \n    columns \"Sequence\", \"GC Content\", \"Reverse Complement\"\n    >>> df = make_strings_df(100, 37)\n    >>> df.shape\n    (100, 3)\n    >>> len(df['Sequence'][0])\n    37\n    \"\"\"\n    dna_strings_list = [random_dna_string(str_length) for _ in range(num_strings)]\n    strings_df = pd.DataFrame({\n        \"Sequence\": dna_strings_list\n    })\n    strings_df['GC Content'] = strings_df['Sequence'].apply(gc_content)\n    strings_df['Reverse Complement'] = strings_df['Sequence'].apply(reverse_complement)\n    return strings_df\n\nimport doctest\ndoctest.testmod(verbose=0)\n\n\nTestResults(failed=0, attempted=9)\n\n\nLet’s use the function and create a histogram of the GC contents for the simulated sequences.\n\nstrings_df = make_strings_df(1000, 23)\nprint(f'strings_df has {strings_df.shape[0]} rows and {strings_df.shape[1]} columns.')\n\nstrings_df has 1000 rows and 3 columns.\n\n\n\nstrings_df.head(10)\n\n\n\n\n  \n    \n      \n      Sequence\n      GC Content\n      Reverse Complement\n    \n  \n  \n    \n      0\n      TAATAATGGGCTAAACTATGTTT\n      0.260870\n      AAACATAGTTTAGCCCATTATTA\n    \n    \n      1\n      GACCGTGACCCAAGGCAGATGGG\n      0.652174\n      CCCATCTGCCTTGGGTCACGGTC\n    \n    \n      2\n      TAGGGTTGTGCTTTACCTTACAT\n      0.391304\n      ATGTAAGGTAAAGCACAACCCTA\n    \n    \n      3\n      GCAAGGCCGGATACGCGTATAAT\n      0.521739\n      ATTATACGCGTATCCGGCCTTGC\n    \n    \n      4\n      ACCACTCCTCAAACGTTACTGAT\n      0.434783\n      ATCAGTAACGTTTGAGGAGTGGT\n    \n    \n      5\n      CCTCGTCAGTTGTCACTTCTATG\n      0.478261\n      CATAGAAGTGACAACTGACGAGG\n    \n    \n      6\n      ACAATGATCGCAGCCGAGGTATA\n      0.478261\n      TATACCTCGGCTGCGATCATTGT\n    \n    \n      7\n      GTTGGATATTCCGCAGCAGAGGA\n      0.521739\n      TCCTCTGCTGCGGAATATCCAAC\n    \n    \n      8\n      CGCTTAAAATCCCTGCATAGACC\n      0.478261\n      GGTCTATGCAGGGATTTTAAGCG\n    \n    \n      9\n      AGACCACTACTGGGTGGAGACGG\n      0.608696\n      CCGTCTCCACCCAGTAGTGGTCT\n    \n  \n\n\n\n\n\nstrings_df['GC Content'].hist();\n\n\n\n\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  const viewSource = window.document.getElementById('quarto-view-source') ||\n                     window.document.getElementById('quarto-code-tools-source');\n  if (viewSource) {\n    const sourceUrl = viewSource.getAttribute(\"data-quarto-source-url\");\n    viewSource.addEventListener(\"click\", function(e) {\n      if (sourceUrl) {\n        if (/\\bviewer_pane=1\\b/.test(window.location)) {\n          window.open(sourceUrl);\n        } else {\n          window.location.href = sourceUrl;\n        }\n      } else {\n        const modal = new bootstrap.Modal(document.getElementById('quarto-embedded-source-code-modal'));\n        modal.show();\n      }\n      return false;\n    });\n  }\n  function toggleCodeHandler(show) {\n    return function(e) {\n      const detailsSrc = window.document.querySelectorAll(\".cell > details > .sourceCode\");\n      for (let i=0; i<detailsSrc.length; i++) {\n        const details = detailsSrc[i].parentElement;\n        if (show) {\n          details.open = true;\n        } else {\n          details.removeAttribute(\"open\");\n        }\n      }\n      const cellCodeDivs = window.document.querySelectorAll(\".cell > .sourceCode\");\n      const fromCls = show ? \"hidden\" : \"unhidden\";\n      const toCls = show ? \"unhidden\" : \"hidden\";\n      for (let i=0; i<cellCodeDivs.length; i++) {\n        const codeDiv = cellCodeDivs[i];\n        if (codeDiv.classList.contains(fromCls)) {\n          codeDiv.classList.remove(fromCls);\n          codeDiv.classList.add(toCls);\n        } \n      }\n      return false;\n    }\n  }\n  const hideAllCode = window.document.getElementById(\"quarto-hide-all-code\");\n  if (hideAllCode) {\n    hideAllCode.addEventListener(\"click\", toggleCodeHandler(false));\n  }\n  const showAllCode = window.document.getElementById(\"quarto-show-all-code\");\n  if (showAllCode) {\n    showAllCode.addEventListener(\"click\", toggleCodeHandler(true));\n  }\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "docs\\four.html#removing-amoas",
    "title": "Sample Analysis",
    "section": "Removing amoAs",
    "text": "We’ll start by removing those amoAs from our data that are not present in over 30 samples across both treatments.\nWe’ll first start by counting the non-detects for each amoA.\n\nnon_detect_counts <- data.raw.long %>%\n  group_by(fert_level, amoA) %>% \n  count(CT == 40) %>% \n  rename(non_detect = `CT == 40`) %>%\n  filter(non_detect == TRUE)\n\nFinding the amoAs that are not detected in > 30 across both samples\n\nremoves <- non_detect_counts %>% \n  pivot_wider(names_from = fert_level, values_from = n, names_prefix = \"fert.\") %>%\n  filter(fert.0 > 30 & fert.336 > 30) %>%\n  pivot_longer(cols = fert.0:fert.336, names_to = \"fert_level\", values_to = \"n\")\n\nWe’ll now reduce data.priming by removing those amoAs that are largely non-detects. We’ll also update the long version while we’re at it\n\ndata.priming.reduced <- data.priming %>% \n   select(-one_of(removes$amoA))\n\ndata.priming.reduced.long <- data.priming.reduced %>% \n  select(-sample_id, field_rep) %>% \n  pivot_longer(cols = contains(\"amoa\")) \n\nHere’s a barchart of what we’re removing:\n\n\nCode\nremoves %>% \n  mutate(amoA = str_sub(amoA, -3)) %>% \n  mutate(favored = case_when(\n    amoA %in% c(\"006\", \"038\", \"064\", \"069\", \"071\") ~ \"Nothing\",\n    amoA %in% c(\"021\", \"028\", \"030\", \"048\", \"073\", \"075\", \"076\", \"077\", \"078\") ~ \"Non-fertilized\",\n    amoA %in% c(\"040\", \"050\", \"053\") ~ \"Fourth quadrant\",\n    TRUE ~ \"First quadrant\"\n  )) %>% \n  mutate(fert_level = str_sub(fert_level, start = 6)) %>% \n  ggplot(aes(amoA, n, fill = favored )) +\n  geom_col() +\n  facet_wrap(~ fert_level) + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.text = element_markdown(size = 12),\n    legend.title = element_markdown(size = 12, hjust = 0),\n    strip.background = element_rect(size = 1, color = \"black\", fill = \"NA\"),\n    panel.grid = element_line(color = \"gray95\"),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA)\n  ) +\n  scale_fill_viridis_d(begin = 0, end = 0.5) +\n  scale_y_continuous(limits = c(0, 50), expand = expansion(add = c(0, 0))) +\n  scale_x_discrete(limits = rev) + \n  coord_flip() + \n  labs(\n    y = \"Number of samples with > 30 non-detects\",\n    title = \"Fertilizer level\",\n    fill = \"Favored by...\"\n  )\n\n\n\n\n\nNote that most of the non-detects that we’re removing are from the non-fertilized group.\nNext, we’ll convert the CT values to presence/absence for use in later analysis.\n\namoA_presence_absence <- data.raw %>% \n  select(sample_id, starts_with(\"amoA\")) %>%\n  mutate(across(starts_with(\"amoA\"), ~ ifelse(.x == 40, 0, 1)))"
  },
  {
    "href": "docs\\four.html#ordination",
    "title": "Sample Analysis",
    "section": "Ordination",
    "text": "Calculating the NMDS (positioning the sites):\n\nmds.priming = metaMDS(data.priming.reduced %>% select(contains(\"amoa\")), distance = \"bray\", k = 3)\n\nsite.scores <- as.data.frame(scores(mds.priming, display = \"sites\")) %>% \n  mutate(sample_id = data.priming.reduced$sample_id,\n         Crop = data.priming.reduced$crop,\n         Fert_Level = as.factor(data.priming.reduced$fert_level),\n         Day = as.factor(data.priming.reduced$doe),\n         Substrate_Addition = as.factor(data.priming.reduced$addition))\n\nThis is enough to plot a basic NMDS:\n\n\nPlotting the NMDS\nnmds.plot <- site.scores %>% \n  ggplot(aes(NMDS1, NMDS2, fill = Fert_Level)) +  \n  geom_hline(yintercept = 0.0,\n             colour = \"grey\",\n             lty = 2) +\n  geom_vline(xintercept = 0.0,\n             colour = \"grey\",\n             lty = 2) +\n  geom_point(size = 4, shape = 21) + \n    theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.text = element_markdown(size = 12),\n    legend.title = element_markdown(size = 12, hjust = 0),\n    axis.text.x = element_text(size = 14),\n    axis.text.y = element_text(size = 14),\n    axis.title.x = element_text(size = 12),\n    axis.title.y = element_text(size = 12),\n    panel.grid = element_line(color = \"gray95\"),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA)\n  ) +\n  scale_fill_discrete(name = \"Fertilizer Level<br>\n                              <span style = 'font-size:8pt;'>\n                              (kg N ha<sup>-1</sup> y<sup>-1</sup>)\n                              </span>\") +\n  guides(\n    fill = guide_legend(override.aes = list(shape = 21, size = 5))\n  )  \n\nnmds.plot\n\n\n\n\n\nWe can also add ellipses to the plot indicate confidence intervals if you’re interested in that:\n\n\nAdding ellipses\nnmds.plot +\n  stat_ellipse(aes(color = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE) \n\n\n\n\n\nAnd again with shading:\n\n\nAdding shading\nnmds.plot +\n  stat_ellipse(aes(color = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE) +\n    stat_ellipse(aes(fill = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE, geom = \"polygon\", alpha = 0.1)"
  },
  {
    "href": "docs\\four.html#arrows",
    "title": "Sample Analysis",
    "section": "Arrows!",
    "text": "Let’s calculate the loading factors of the individual amoas:\n\n\nCalculating loadings\ndune_dist <- vegdist(data.priming %>% select(starts_with('amoA')))\n\namoa_anosim <- anosim(dune_dist, data.priming$fert_level)\n\nmds.spp.fit <- envfit(mds.priming, data.priming.reduced %>% select(contains(\"amoa\")), permutations = 999)\n\nspp.scrs <- as.data.frame(scores(mds.spp.fit, display = \"vectors\")) \nspp.scrs <- cbind(spp.scrs, Species = rownames(spp.scrs)) \nspp.scrs <- cbind(spp.scrs, pval = mds.spp.fit$vectors$pvals)\n\nspp.scores <- as.data.frame(scores(mds.spp.fit, display = \"vectors\")) %>% \n  mutate(Species = rownames(.),\n         pval = mds.spp.fit$vectors$pvals)\n\n\nThis is enough to plot arrows on the NMDS. We’ll show the loadings of some amoAs of interest that we identified in a previous analysis.\n\n\nPlotting arrows\nspecial <- c(\"amoA.012\", \"amoA.031\", \"amoA.035\", \"amoA.042\", \"amoA.045\", \"amoA.070\")\n\nspecial_arrows <- spp.scores %>% \n  rownames_to_column() %>% \n  filter(rowname %in% special) %>% \n  mutate(x = -0.25 * NMDS1,\n         y = -0.25 * NMDS2,\n         assay = str_sub(rowname, -2),\n         assay = paste0(\"amoA_AOB_p\", assay)\n         )\n\nnmds.plot +\n    geom_segment(data = special_arrows,\n               aes(x = 0, xend = -0.3 * NMDS1,\n                   y = 0, yend = -0.3 * NMDS2),\n               size = 0.66,\n               arrow = arrow(length = unit(0.25, \"cm\")),\n                             color = \"grey10\", lwd = 0.3,\n               inherit.aes = FALSE) +\n  ggrepel::geom_text_repel(\n    data = special_arrows,\n    aes(x * 1, y * 1, label = assay),\n    fontface = \"bold\",\n    size = 4,\n    inherit.aes = FALSE,\n    force = 1,\n    nudge_x = -0.001\n  ) +\n  annotate(\n    \"text\",\n    label = paste0(\"ANOSIM R = \", round(amoa_anosim$statistic, 2),\n                   \"\\np < 0.001\"),\n    x = 0.4,\n    y = 0.25,\n    size = 5,\n    fontface = 2\n  ) +\n  stat_ellipse(aes(color = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE)\n\n\nWarning: Duplicated aesthetics after name standardisation: size"
  },
  {
    "href": "docs\\four.html#statistics",
    "title": "Sample Analysis",
    "section": "Statistics",
    "text": "Which factors have an impact on overall community composition?\n\nX <- data.priming.reduced %>% \n  select(-c(contains(\"amoa\")))\nY <- data.priming.reduced %>% \n  select(c(contains(\"amoa\")))\n\nadonis(Y ~ X$fert_level + X$addition + X$crop + X$timepoint) \n\n\nCall:\nadonis(formula = Y ~ X$fert_level + X$addition + X$crop + X$timepoint) \n\nPermutation: free\nNumber of permutations: 999\n\nTerms added sequentially (first to last)\n\n             Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)    \nX$fert_level  1    1.4426 1.44255  56.092 0.37093  0.001 ***\nX$addition    2    0.0327 0.01633   0.635 0.00840  0.680    \nX$crop        1    0.0882 0.08823   3.431 0.02269  0.036 *  \nX$timepoint   1    0.0367 0.03671   1.427 0.00944  0.214    \nResiduals    89    2.2889 0.02572         0.58855           \nTotal        94    3.8890                 1.00000           \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThis tells us that fertilization level is very significant and explains ~37% of the variation in our samples. Crop is also a significant factor on community composition, though it only explains 2.3% of the variation.\n\n\nHow do the treatment factors affect the “abundance” of genes on an individual level?\nAll the code below does is perform an ANOVA of the gene’s abundance against all the terms and all of their interactions.\n\nformulae <- lapply(colnames(data.priming.reduced %>% select(starts_with(\"amoA\"))), function(x) as.formula(paste0(x, \" ~ fert_level * crop * timepoint * addition\")))\n\nres <- lapply(formulae, function(x) broom::tidy(aov(x, data = data.priming.reduced)))\nnames(res) <- format(formulae)\nnames(res) <- str_sub(names(res), end = 8)\n\nanova_results <- lapply(seq_along(res), function(i) res[[i]] %>% mutate(gene = names(res)[[i]])) %>% \n  bind_rows() %>% \n  filter(term != \"Residuals\") %>% \n  mutate(sig = case_when(\n    p.value < 0.05 & p.value > 0.01 ~ \"*\",\n    p.value < 0.01 & p.value > 0.001 ~ \"**\",\n    p.value < 0.001 ~ \"***\",\n    TRUE ~ \"NS\"\n  ))\n\nVisualization:\n\n\nANOVA visualization\nanova_results %>% \n  mutate(gene = str_sub(gene, -3)) %>% \n  ggplot(aes(gene, term, fill = sig)) + \n  geom_tile(color = \"black\") + \n  coord_equal() + \n  labs(y = \"\",\n       x = \"amoA\",\n       title = \"Summary of ANOVA results\",\n       fill = \"Significance \") + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5)\n  ) + \n  scale_fill_viridis_d(option = \"magma\", direction = -1)\n\n\n\n\n\nOverall, we see that, again, fertilization level has a significant impact on abundance levels of the individual genes, and it’s not even really that close. There are other factors that might be worth investigating on a gene-by-gene basis, too, but that’s for later."
  },
  {
    "href": "docs\\four.html#biodiversity",
    "title": "Sample Analysis",
    "section": "Biodiversity",
    "text": "Let’s start by visualizing the presence/absence table:\n\n\nPresence/absence plot\namoA_presence_absence %>% \n  pivot_longer(cols = starts_with(\"amoA\"), names_to = \"amoA\", values_to = \"presence\") %>% \n  mutate(amoA = str_sub(amoA, -2),\n         amoA = paste0(\"amoA_AOB_p\", amoA),\n         presence = as.factor(presence)) %>% \n  left_join(metadata %>% rownames_to_column(var = \"sample_id\")) %>% \n  mutate(strip_label = paste0(fert_level, \" kg N ha<sup>-1</sup> y<sup>-1</sup>\")) %>% \n  ggplot(aes(sample_id, amoA, fill = presence)) + \n  geom_tile(color = \"black\") +\n  labs(\n    x = \"Sample name\",\n    y = \"Primer pair\",\n    fill = \"Species is:\",\n    title = \"\",\n    subtitle = \"\"\n  ) + \n  scale_fill_viridis_d(labels = c(\"Absent\", \"Present\"),\n                       begin = 0, end = 1,\n                       option = \"magma\") +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25),\n    axis.text.y = element_text(size = 7),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    strip.text = element_markdown(size = 10, face = \"bold\"),\n    strip.background = element_rect(size = 1, color = \"blaCk\", fill = NA),\n    plot.margin = unit(c(0, 0.1, 0.1, 0.1), \"cm\")\n  ) + \n  scale_y_discrete(limits = rev) + \n  facet_grid(~ strip_label, scales = \"free\")"
  },
  {
    "href": "docs\\four.html#reading-in-the-best-blast-hit-info",
    "title": "Sample Analysis",
    "section": "Reading in the best BLAST hit info:",
    "text": "amoA_organism_info <- readxl::read_xlsx(\"data/amoa_mfp_qpcr_org_accessions.xlsx\", sheet = 5) %>% \n  select(-c(contains(c(\"forward\", \"reverse\", \"notes\")))) \n\nCounts of best BLAST hits:\n\namoA_organism_info %>% \n  count(best_blast_hits, sort = TRUE) \n\n# A tibble: 25 x 2\n   best_blast_hits                               n\n   <chr>                                     <int>\n 1 Nitrosolobus multiformis AmoA (amoA) gene    10\n 2 Nitrosospira sp. En13 AmoA                    9\n 3 Nitrosospira multiformis ATCC 25196           7\n 4 Nitrosospira sp. Wyke8 AmoA                   7\n 5 Nitrosospira lacus strain APG3                6\n 6 Nitrosospira sp. Np39-19                      6\n 7 Nitrosospira sp. Wyke2                        4\n 8 Nitrosospira sp. NpAV                         3\n 9 Nitrosomonas sp. JL21                         2\n10 Nitrosospira briensis                         2\n# ... with 15 more rows"
  },
  {
    "href": "docs\\four.html#creating-a-phyloseq-object",
    "title": "Sample Analysis",
    "section": "Creating a phyloseq object",
    "text": "amoa_tax_table <- amoA_organism_info %>% \n  select(array_name, best_blast_hits) %>% \n  column_to_rownames(var = \"array_name\") %>% \n  tax_table()\n\nrownames(amoa_tax_table) <- amoA_organism_info$array_name\n\n\nps <- phyloseq(\n  otu_table(amoA_presence_absence %>% column_to_rownames(var = \"sample_id\"), taxa_are_rows = FALSE),\n  sample_data(metadata),\n  amoa_tax_table\n)"
  },
  {
    "href": "docs\\four.html#richness-analysis",
    "title": "Sample Analysis",
    "section": "Richness analysis",
    "text": "How does observed richness and evenness change with treatment level? This is a modified diversity function that does a bunch of nice stuff that phyloseq::estimate_richness doesn’t do.\n\n\nEstimate richness function\nestimate_richness_mod <- function(physeq, split=TRUE, measures=NULL){\n  \n\n  if( !split ){\n    OTU <- taxa_sums(physeq)        \n  } else if( split ){\n    OTU <- as(otu_table(physeq), \"matrix\")\n    if( taxa_are_rows(physeq) ){ OTU <- t(OTU) }\n  }\n  \n\n  renamevec = c(\"Observed\", \"Chao1\", \"ACE\", \"Shannon\", \"Pielou\", \"Simpson\", \"InvSimpson\", \"SimpsonE\", \"Fisher\")\n  names(renamevec) <- c(\"S.obs\", \"S.chao1\", \"S.ACE\", \"shannon\", \"pielou\", \"simpson\", \"invsimpson\", \"simpsone\", \"fisher\")\n\n  if( is.null(measures) ){\n    measures = as.character(renamevec)\n  }\n\n  if( any(measures %in% names(renamevec)) ){\n    measures[measures %in% names(renamevec)] <- renamevec[names(renamevec) %in% measures]\n  }\n  \n\n  if( !any(measures %in% renamevec) ){\n    stop(\"None of the `measures` you provided are supported. Try default `NULL` instead.\")\n  }\n  \n\n  outlist = vector(\"list\")\n\n  estimRmeas = c(\"Chao1\", \"Observed\", \"ACE\")\n  if( any(estimRmeas %in% measures) ){\n    outlist <- c(outlist, list(t(data.frame(estimateR(OTU)))))\n  }\n  if( \"Shannon\" %in% measures ){\n    outlist <- c(outlist, list(shannon = diversity(OTU, index=\"shannon\")))\n  }\n  if( \"Pielou\" %in% measures){\n    #print(\"Starting Pielou\")\n    outlist <- c(outlist, list(pielou = diversity(OTU, index = \"shannon\")/log(estimateR(OTU)[\"S.obs\",])))\n  }\n  if( \"Simpson\" %in% measures ){\n    outlist <- c(outlist, list(simpson = diversity(OTU, index=\"simpson\")))\n  }\n  if( \"InvSimpson\" %in% measures ){\n    outlist <- c(outlist, list(invsimpson = diversity(OTU, index=\"invsimpson\")))\n  }\n  if( \"SimpsonE\" %in% measures ){\n\n    outlist <- c(outlist, list(simpsone = diversity(OTU, index=\"invsimpson\")/estimateR(OTU)[\"S.obs\",]))\n  }\n  if( \"Fisher\" %in% measures ){\n    fisher = tryCatch(fisher.alpha(OTU, se=TRUE),\n                      warning=function(w){\n                        warning(\"phyloseq::estimate_richness: Warning in fisher.alpha(). See `?fisher.fit` or ?`fisher.alpha`. Treat fisher results with caution\")\n                        suppressWarnings(fisher.alpha(OTU, se=TRUE)[, c(\"alpha\", \"se\")])\n                      }\n    )\n    if(!is.null(dim(fisher))){\n      colnames(fisher)[1:2] <- c(\"Fisher\", \"se.fisher\")\n      outlist <- c(outlist, list(fisher))\n    } else {\n      outlist <- c(outlist, Fisher=list(fisher))\n    }\n  }\n  out = do.call(\"cbind\", outlist)\n\n  namechange = intersect(colnames(out), names(renamevec))\n  colnames(out)[colnames(out) %in% namechange] <- renamevec[namechange]\n\n  colkeep = sapply(paste0(\"(se\\\\.){0,}\", measures), grep, colnames(out), ignore.case=TRUE)\n  out = out[, sort(unique(unlist(colkeep))), drop=FALSE]\n\n  out <- as.data.frame(out)\n  return(out)\n}\n\n\n\n\nCalculate richnesses for sample groups\nmetrics <- c(\"Observed\", \"Shannon\")\nrichness <- estimate_richness_mod(ps, measures = metrics) %>% \n  rownames_to_column(var = \"sample_id\") %>% \n  mutate(sample_id = str_sub(sample_id, start = 2)) \n\nrichness <- left_join(sample_data(ps) %>% data.frame() %>% rownames_to_column(var = \"sample_id\"), richness) %>% \n  pivot_longer(cols = Observed:Shannon, names_to = \"Metric\", values_to = \"Value\")\n\n\nJoining, by = \"sample_id\""
  },
  {
    "href": "docs\\four.html#statistical-tests",
    "title": "Sample Analysis",
    "section": "Statistical tests",
    "text": "Significance test of fertilization level on richness.\n\n(sig_rich_fert <- kruskal.test(Value ~ fert_level, data = richness %>% filter(Metric == \"Observed\")))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  Value by fert_level\nKruskal-Wallis chi-squared = 54.212, df = 1, p-value = 1.8e-13\n\n\nThe p-value < 0.001 gives us strong statistical evidence that richness is significantly different between fertilization treatment groups.\n\n\nSignificance test of fertilization level on richness\n\n(sig_even_fert <- kruskal.test(Value ~ fert_level, data = richness %>% filter(Metric == \"Shannon\")))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  Value by fert_level\nKruskal-Wallis chi-squared = 54.268, df = 1, p-value = 1.75e-13\n\n\nThe p-value < 0.001 gives us strong statistical evidence that Shannon diversity is significantly different between fertilization treatment groups."
  },
  {
    "href": "docs\\four.html#making-nice-plots-for-stat-differences",
    "title": "Sample Analysis",
    "section": "Making nice plots for stat differences",
    "text": "Standard deviations, mean\n\n\nGenerate alpha diversity plots\nsummaries <- richness %>% \n  group_by(Metric, fert_level) %>% \n  summarize(mean_val = mean(Value), \n            sd_val = sd(Value),\n            n = n(),\n            .groups = \"drop\") %>% \n  mutate(se = abs((sd_val / sqrt(n)) * qt(0.025, n - 1) )) %>% \n  mutate(ymax = mean_val + se, \n         ymin = mean_val - se) \n\nthis_annotation <- data.frame(\n  Metric = c(\"Observed\", \"Shannon\"),\n  lab = c(\"***\", \"***\"),\n  x = 1.5,\n  y = c(50 + 5 + 2, 4 + 0.5),\n  lineheights = c(50 + 5, 4 + 0.25)\n)\n\nsummaries %>%  \n  ggplot(aes(fert_level, mean_val, fill = fert_level)) + \n  geom_col(color = \"black\", size = 1) +\n  facet_wrap(~ Metric, scales = \"free_y\") + \n  theme(\n    legend.position = \"none\",\n    strip.background = element_blank(),\n    axis.title.y = element_blank(),\n    strip.placement = \"outside\",\n    plot.title = element_text(hjust = 0.5),\n    strip.text.y = element_text(face = \"bold\", size = 10),\n    strip.text = element_text(face = \"bold\", size = 10),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray90\", linetype = \"dashed\"),\n    axis.ticks = element_blank(),\n    panel.border = element_rect(color = \"black\", size = 1, fill = \"NA\")\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) + \n  geom_errorbar(aes(ymin = ymin, ymax = ymax, width = 0.5)) + \n  geom_text(\n    data = this_annotation,\n    aes(x = x, y = y, label = lab),\n    inherit.aes = FALSE,\n    size = 5\n    ) + \n  geom_segment(data = this_annotation,\n               aes(x = 1,\n                   xend = 2, \n                   y = lineheights,\n                   yend = lineheights),\n               inherit.aes = FALSE) + \n  labs(\n    x = \"Fertilization Level\\n(*** = p < 0.001 by Kruskal Wallis)\",\n    title = \"Alpha diversity metrics by fertilization level\"\n    \n  )"
  },
  {
    "href": "docs\\four.html#beta-diversity",
    "title": "Sample Analysis",
    "section": "Beta diversity",
    "text": "We’ll start beta diversity analysis off by doing an ADONIS/PERMANOVA to determine if treatment centroids/treatment variations are different between groups.\n\ndis <- vegdist(otu_table(ps))\ngroups <- sample_data(ps)$fert_level\nmod <- betadisper(dis, groups)\nanova(mod)\n\nAnalysis of Variance Table\n\nResponse: Distances\n          Df  Sum Sq Mean Sq F value    Pr(>F)    \nGroups     1 0.52595 0.52595  24.589 3.228e-06 ***\nResiduals 92 1.96781 0.02139                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nSince p <<<< 0.0001, there is strong evidence that the overall community compositions are significantly different (treatment centroid, distance to centroid, community variation) between the two groups. W can visualize this with a 1 SD ellipse:\n\nplot(mod, ellipse = TRUE, hull = FALSE) \n\n\n\n\nWe see that there is clear separation between the two treatment centroids. Let’s do some more analysis on the distance-to-centroids that we’re seeing:\n\n\nDistance-to-centroid plots\nbetadistances <- data.frame(\n  time_frame = mod$group,\n  distance = mod$distances\n)\n\nbetadistances %>% \n  ggplot(aes(time_frame, distance)) + \n  geom_boxplot(size = 1, outlier.shape = NA) + \n  geom_jitter(aes(fill = time_frame), size = 5, shape = 21, width = 0.2) +\n  theme(\n    legend.position = \"none\",\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_blank(),\n    plot.title = element_text(size = 17),\n    plot.subtitle = element_text(size = 9),\n    axis.ticks.length = unit(0.25, \"cm\"),\n    axis.ticks.x = element_blank(),\n    axis.text.x = element_text(face = \"bold\", angle = 0, size = 12),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(size = 14, face = \"bold\"),\n    \n  ) + \n  labs(\n    color = \"\",\n    y = \"Distance to centroid\"\n  ) +\n  ggsignif::geom_signif(\n    map_signif_level = TRUE,\n    comparisons = list(c(\"0\", \"336\")),\n    test = \"t.test\",\n    step_increase = 0.1,\n    color = \"black\",\n    size = 1,\n    textsize = 5,\n    tip_length = 0\n  )\n\n\n\n\n\nThe significance bar is coming from the PERMANOVA test we did above. We see that there is actually less beta diversity (as meaasured by distance-to-centroid) in the fertilized group than in the non- fertilized group. We’ll see another visualization backing this up in the next section:"
  },
  {
    "href": "docs\\four.html#composition",
    "title": "Sample Analysis",
    "section": "Composition",
    "text": "Let’s visualize the composition of the communities, separated by fertilization. We’ll start with raw counts - how many times was that best BLAST hit seen in that sample?\n\ncomp_barplot(ps, \"ta1\",\n             facet_by = \"fert_level\",\n             sample_order =  \"default\",\n             tax_transform_for_plot = \"identity\") +\n  coord_flip() + \n  labs(\n    title = \"Sample composition by fertilization level\",\n    subtitle = \"(raw counts)\"\n  ) + \n  theme(\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(margin = margin(r = -7)),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 10),\n    strip.text = element_text(size = 10, face = \"bold\")\n  ) +\n  guides(\n    fill = guide_legend(title = \"Best BLAST hit\", reverse = TRUE)\n  )\n\n\n\n\nWe see that overall the fertilized group appears to have more richness in it.\nHow about sample composition? IE, relative abundances?\n\ncomp_barplot(ps, \"ta1\",\n             facet_by = \"fert_level\",\n             sample_order =  \"default\") +\n  coord_flip() + \n  labs(\n    title = \"Sample composition by fertilization level\",\n    subtitle = \"(relative abundance)\"\n  ) + \n  theme(\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(margin = margin(r = -7)),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 10),\n    strip.text = element_text(size = 10, face = \"bold\")\n  ) +\n  guides(\n    fill = guide_legend(title = \"Best BLAST hit\", reverse = TRUE)\n  )\n\n\n\n\nTwo big things pop out:\n\nSpecies distribution is more even in the fertilized group. This makes sense given previous results showing that Shannon entropy is higher and beta diversity is lower in the fertilized group. You can also see that the communities just look more like each other in the fertilized group, which manifests in shorter distance-to-centroids/lower community variation.\nThere’s more green in the fertilized group, suggesting that Nitrosolobus multiformus and Nitrosospira sp. En13 abundances are significantly affected by fertilization addition."
  },
  {
    "href": "docs\\four.html#statistics-on-a-best-blast-hit-level",
    "title": "Sample Analysis",
    "section": "Statistics on a best BLAST hit level",
    "text": "The next chunk is just doing some data transformation stuff to count the number of times each organism was seen in each sample in preparation for the statistical analysis.\n\npa_count <- ps %>% \n  otu_table() %>%\n  data.frame %>%\n  rownames_to_column(var = \"sample_id\") %>% \n  pivot_longer(starts_with(\"amoA\")) \n\n\norg_table <- tax_table(ps) %>% \n  data.frame %>% \n  rownames_to_column(var = \"name\") %>% \n  rename(bbh = ta1) %>% \n  mutate(cleaned_names = janitor::make_clean_names(bbh))\n\nbbh_sample_counts <- left_join(pa_count, org_table, by = \"name\") %>%\n  group_by(sample_id, bbh) %>% \n  summarize(value = sum(value)) %>% \n  pivot_wider(names_from = \"bbh\", values_from = value)\n\nbbh_level_counts <- left_join(bbh_sample_counts,\n          sample_data(ps) %>% \n            data.frame %>% \n            rownames_to_column(var = 'sample_id') %>% \n            right_join(bbh_sample_counts)\n) %>% \n  ungroup()\n\nHere, we’re preparing formulas to feed to a lapply function to perform a Kruskal-Wallis test on all of the organisms.\n\nformulae <- lapply(colnames(bbh_sample_counts %>% select(-sample_id) %>% janitor::clean_names()) , function(x) as.formula(paste0(x, \" ~ fert_level * crop * timepoint * addition\")))\n\nformulae[[1]] <- NULL\n\nres <- lapply(formulae, function(x) broom::tidy(aov(x, data = bbh_level_counts %>% janitor::clean_names())))\nnames(res) <- format(formulae)\nnames(res) <- lapply(names(res), function(x) str_split(x, \"~\")[[1]][1]) %>% unlist()\n\nanova_results.counts <- lapply(seq_along(res), function(i) res[[i]] %>% mutate(gene = names(res)[[i]])) %>% \n  bind_rows() %>% \n  filter(term != \"Residuals\") %>% \n  mutate(gene = str_trim(gene))\n\nVisualizing the results again:\n\nanova_results.counts %>%\n  left_join(org_table, by = c(\"gene\" =\"cleaned_names\")) %>%\n  mutate(sig = case_when(\n    p.value < 0.05 & p.value > 0.01 ~ \"*\",\n    p.value < 0.01 & p.value > 0.001 ~ \"**\",\n    p.value < 0.001 ~ \"***\",\n    TRUE ~ \"NS\"\n  )) %>% \n  ggplot(aes(term, bbh, fill = sig)) + \n  geom_tile(color = \"black\") + \n  labs(y = \"\",\n       x = \"\",\n       title = \"Summary of ANOVA results\",\n       fill = \"Significance \") + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n    axis.text.y = element_text()\n  ) + \n  scale_fill_viridis_d(option = \"magma\", direction = -1) + \n  scale_y_discrete(limits = rev) +\n  coord_equal() \n\n\n\n\nWe see the same pattern at the organism level as when we did this at the gene level: fertilization level is by far the most significant factor affecting Presence/Absence of organisms.\n\n\nSource Code\n---\ntitle: \"Sample Analysis\"\n---\n\n```{r}\n#| message: false\n#| echo: false\n#| warning: false\nlibrary(vegan)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(microViz)\nlibrary(phyloseq)\nlibrary(ggtext)\n\ntheme_set(theme_minimal())\n```\n\nThis is some preliminary analysis I did for an experiment we're doing to quantify the effects of crop priming on nitrogen fixation rates.\nYou can see the latest version of this analysis [at my research journal](https://pommevilla.github.io/crop_priming/analysis_so_far.html) and learn more about the experiment at [my website](https://pommevilla.netlify.app/project/20210823_icrop_priming/).\nAlso note that you can view the source code of this page by click on the `Code` button to the right of the title of this page.\n\n\n### Data\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Reading in the data\"\ndata.priming <- read.csv(\"data/priming_amoA_deltaCt.csv\", header = T) %>% \n  rename(sample_id = X) \n\ndata.raw <- read.csv(\"data/priming_amoA_rawCt.csv\", header = T) %>% \n  rename(sample_id = X)\n\ndata.priming.long <- data.priming %>% \n  pivot_longer(cols = starts_with(\"amoA\"), names_to = \"amoA\", values_to = \"deltaCT\")\n\ndata.raw.long <- data.raw %>% \n  pivot_longer(cols = starts_with(\"amoA\"), names_to = \"amoA\", values_to = \"CT\")\n\ndata.priming.long$sample_id <- fct_reorder(data.priming.long$sample_id, parse_number(data.priming.long$sample_id))\n\ndf <- data.priming[, -1]\nrownames(df) <- data.priming[, 1]\n\nmetadata <- df %>% \n  select(fert_level:field_rep) %>%\n  mutate(across(everything(), as.factor))\n\n\namoa_counts <- df %>% \n  select(starts_with(\"amoA\"))\n\n```\n\n`data.priming` contains the data for our experiment. There are rows for samples, columns for the \ndelta CTs of the different amoAs, and some metadata.\n\n```{r}\ndata.priming[1:5, 1:5]\n```\n\n`data.raw` contains the same columns but lists the raw CT values instead of the 16s-normalized ones.\n\n```{r}\ndata.raw[1:5, 1:5]\n```\n\nTHe `long` versions of these dataframes contains the same info but in long format to play nicely\nwith `ggplot`.\n\n## Removing amoAs\n\nWe'll start by removing those amoAs from our data that are not present in over 30 samples across both treatments.\n\nWe'll first start by counting the non-detects for each amoA.\n\n```{r}\nnon_detect_counts <- data.raw.long %>%\n  group_by(fert_level, amoA) %>% \n  count(CT == 40) %>% \n  rename(non_detect = `CT == 40`) %>%\n  filter(non_detect == TRUE)\n```\n\nFinding the amoAs that are not detected in > 30 across both samples\n\n```{r}\nremoves <- non_detect_counts %>% \n  pivot_wider(names_from = fert_level, values_from = n, names_prefix = \"fert.\") %>%\n  filter(fert.0 > 30 & fert.336 > 30) %>%\n  pivot_longer(cols = fert.0:fert.336, names_to = \"fert_level\", values_to = \"n\")\n```\n\nWe'll now reduce `data.priming` by removing those amoAs that are largely non-detects. \nWe'll also update the `long` version while we're at it\n\n```{r}\ndata.priming.reduced <- data.priming %>% \n   select(-one_of(removes$amoA))\n\ndata.priming.reduced.long <- data.priming.reduced %>% \n  select(-sample_id, field_rep) %>% \n  pivot_longer(cols = contains(\"amoa\")) \n\n```\n\nHere's a barchart of what we're removing:\n\n```{r}\n#| code-fold: true\nremoves %>% \n  mutate(amoA = str_sub(amoA, -3)) %>% \n  mutate(favored = case_when(\n    amoA %in% c(\"006\", \"038\", \"064\", \"069\", \"071\") ~ \"Nothing\",\n    amoA %in% c(\"021\", \"028\", \"030\", \"048\", \"073\", \"075\", \"076\", \"077\", \"078\") ~ \"Non-fertilized\",\n    amoA %in% c(\"040\", \"050\", \"053\") ~ \"Fourth quadrant\",\n    TRUE ~ \"First quadrant\"\n  )) %>% \n  mutate(fert_level = str_sub(fert_level, start = 6)) %>% \n  ggplot(aes(amoA, n, fill = favored )) +\n  geom_col() +\n  facet_wrap(~ fert_level) + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.text = element_markdown(size = 12),\n    legend.title = element_markdown(size = 12, hjust = 0),\n    strip.background = element_rect(size = 1, color = \"black\", fill = \"NA\"),\n    panel.grid = element_line(color = \"gray95\"),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA)\n  ) +\n  scale_fill_viridis_d(begin = 0, end = 0.5) +\n  scale_y_continuous(limits = c(0, 50), expand = expansion(add = c(0, 0))) +\n  scale_x_discrete(limits = rev) + \n  coord_flip() + \n  labs(\n    y = \"Number of samples with > 30 non-detects\",\n    title = \"Fertilizer level\",\n    fill = \"Favored by...\"\n  )\n```\n\nNote that most of the non-detects that we're removing are from the non-fertilized group.\n\nNext, we'll convert the CT values to presence/absence for use in later analysis.\n\n```{r}\namoA_presence_absence <- data.raw %>% \n  select(sample_id, starts_with(\"amoA\")) %>%\n  mutate(across(starts_with(\"amoA\"), ~ ifelse(.x == 40, 0, 1))) \n```\n\n## Ordination\n\nCalculating the NMDS (positioning the sites):\n\n```{r, echo=TRUE, results='hide'}\nmds.priming = metaMDS(data.priming.reduced %>% select(contains(\"amoa\")), distance = \"bray\", k = 3)\n\nsite.scores <- as.data.frame(scores(mds.priming, display = \"sites\")) %>% \n  mutate(sample_id = data.priming.reduced$sample_id,\n         Crop = data.priming.reduced$crop,\n         Fert_Level = as.factor(data.priming.reduced$fert_level),\n         Day = as.factor(data.priming.reduced$doe),\n         Substrate_Addition = as.factor(data.priming.reduced$addition))\n```\n\nThis is enough to plot a basic NMDS:\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Plotting the NMDS\"\nnmds.plot <- site.scores %>% \n  ggplot(aes(NMDS1, NMDS2, fill = Fert_Level)) +  \n  geom_hline(yintercept = 0.0,\n             colour = \"grey\",\n             lty = 2) +\n  geom_vline(xintercept = 0.0,\n             colour = \"grey\",\n             lty = 2) +\n  geom_point(size = 4, shape = 21) + \n    theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.text = element_markdown(size = 12),\n    legend.title = element_markdown(size = 12, hjust = 0),\n    axis.text.x = element_text(size = 14),\n    axis.text.y = element_text(size = 14),\n    axis.title.x = element_text(size = 12),\n    axis.title.y = element_text(size = 12),\n    panel.grid = element_line(color = \"gray95\"),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA)\n  ) +\n  scale_fill_discrete(name = \"Fertilizer Level<br>\n                              <span style = 'font-size:8pt;'>\n                              (kg N ha<sup>-1</sup> y<sup>-1</sup>)\n                              </span>\") +\n  guides(\n    fill = guide_legend(override.aes = list(shape = 21, size = 5))\n  )  \n\nnmds.plot\n```\n\nWe can also add ellipses to the plot indicate confidence intervals  if you're interested in that:\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Adding ellipses\"\nnmds.plot +\n  stat_ellipse(aes(color = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE) \n```\n\nAnd again with shading:\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Adding shading\"\nnmds.plot +\n  stat_ellipse(aes(color = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE) +\n    stat_ellipse(aes(fill = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE, geom = \"polygon\", alpha = 0.1) \n```\n\n## Arrows!\n\nLet's calculate the loading factors of the individual amoas:\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Calculating loadings\"\ndune_dist <- vegdist(data.priming %>% select(starts_with('amoA')))\n\namoa_anosim <- anosim(dune_dist, data.priming$fert_level)\n\nmds.spp.fit <- envfit(mds.priming, data.priming.reduced %>% select(contains(\"amoa\")), permutations = 999)\n\nspp.scrs <- as.data.frame(scores(mds.spp.fit, display = \"vectors\")) \nspp.scrs <- cbind(spp.scrs, Species = rownames(spp.scrs)) \nspp.scrs <- cbind(spp.scrs, pval = mds.spp.fit$vectors$pvals)\n\nspp.scores <- as.data.frame(scores(mds.spp.fit, display = \"vectors\")) %>% \n  mutate(Species = rownames(.),\n         pval = mds.spp.fit$vectors$pvals)\n```\n\nThis is enough to plot arrows on the NMDS. \nWe'll show the loadings of some amoAs of interest that we identified in a previous analysis.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Plotting arrows\"\nspecial <- c(\"amoA.012\", \"amoA.031\", \"amoA.035\", \"amoA.042\", \"amoA.045\", \"amoA.070\")\n\nspecial_arrows <- spp.scores %>% \n  rownames_to_column() %>% \n  filter(rowname %in% special) %>% \n  mutate(x = -0.25 * NMDS1,\n         y = -0.25 * NMDS2,\n         assay = str_sub(rowname, -2),\n         assay = paste0(\"amoA_AOB_p\", assay)\n         )\n\nnmds.plot +\n    geom_segment(data = special_arrows,\n               aes(x = 0, xend = -0.3 * NMDS1,\n                   y = 0, yend = -0.3 * NMDS2),\n               size = 0.66,\n               arrow = arrow(length = unit(0.25, \"cm\")),\n                             color = \"grey10\", lwd = 0.3,\n               inherit.aes = FALSE) +\n  ggrepel::geom_text_repel(\n    data = special_arrows,\n    aes(x * 1, y * 1, label = assay),\n    fontface = \"bold\",\n    size = 4,\n    inherit.aes = FALSE,\n    force = 1,\n    nudge_x = -0.001\n  ) +\n  annotate(\n    \"text\",\n    label = paste0(\"ANOSIM R = \", round(amoa_anosim$statistic, 2),\n                   \"\\np < 0.001\"),\n    x = 0.4,\n    y = 0.25,\n    size = 5,\n    fontface = 2\n  ) +\n  stat_ellipse(aes(color = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE)\n\n```\n\n\n## Statistics\n\n### Which factors have an impact on overall community composition?\n\n```{r}\nX <- data.priming.reduced %>% \n  select(-c(contains(\"amoa\")))\nY <- data.priming.reduced %>% \n  select(c(contains(\"amoa\")))\n\nadonis(Y ~ X$fert_level + X$addition + X$crop + X$timepoint) \n```\n\nThis tells us that fertilization level is very significant and explains ~37% of the variation\nin our samples. Crop is also a significant factor on community composition, though it only explains\n2.3% of the variation.\n\n### How do the treatment factors affect the \"abundance\" of genes on an individual level?\n\nAll the code below does is perform an ANOVA of the gene's abundance against all the terms\nand all of their interactions.\n\n```{r}\nformulae <- lapply(colnames(data.priming.reduced %>% select(starts_with(\"amoA\"))), function(x) as.formula(paste0(x, \" ~ fert_level * crop * timepoint * addition\")))\n\nres <- lapply(formulae, function(x) broom::tidy(aov(x, data = data.priming.reduced)))\nnames(res) <- format(formulae)\nnames(res) <- str_sub(names(res), end = 8)\n\nanova_results <- lapply(seq_along(res), function(i) res[[i]] %>% mutate(gene = names(res)[[i]])) %>% \n  bind_rows() %>% \n  filter(term != \"Residuals\") %>% \n  mutate(sig = case_when(\n    p.value < 0.05 & p.value > 0.01 ~ \"*\",\n    p.value < 0.01 & p.value > 0.001 ~ \"**\",\n    p.value < 0.001 ~ \"***\",\n    TRUE ~ \"NS\"\n  ))\n```\n\nVisualization:\n\n```{r}\n#| code-fold: true\n#| code-summary: \"ANOVA visualization\"\nanova_results %>% \n  mutate(gene = str_sub(gene, -3)) %>% \n  ggplot(aes(gene, term, fill = sig)) + \n  geom_tile(color = \"black\") + \n  coord_equal() + \n  labs(y = \"\",\n       x = \"amoA\",\n       title = \"Summary of ANOVA results\",\n       fill = \"Significance \") + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5)\n  ) + \n  scale_fill_viridis_d(option = \"magma\", direction = -1)\n```\n\nOverall, we see that, again, fertilization level has a significant impact on abundance levels of the individual genes, and it's not even really that close.\nThere are other factors that might be worth investigating on a gene-by-gene basis, too, but that's for later.\n\n## Biodiversity\n\nLet's start by visualizing the presence/absence table:\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Presence/absence plot\"\n#| message: false\namoA_presence_absence %>% \n  pivot_longer(cols = starts_with(\"amoA\"), names_to = \"amoA\", values_to = \"presence\") %>% \n  mutate(amoA = str_sub(amoA, -2),\n         amoA = paste0(\"amoA_AOB_p\", amoA),\n         presence = as.factor(presence)) %>% \n  left_join(metadata %>% rownames_to_column(var = \"sample_id\")) %>% \n  mutate(strip_label = paste0(fert_level, \" kg N ha<sup>-1</sup> y<sup>-1</sup>\")) %>% \n  ggplot(aes(sample_id, amoA, fill = presence)) + \n  geom_tile(color = \"black\") +\n  labs(\n    x = \"Sample name\",\n    y = \"Primer pair\",\n    fill = \"Species is:\",\n    title = \"\",\n    subtitle = \"\"\n  ) + \n  scale_fill_viridis_d(labels = c(\"Absent\", \"Present\"),\n                       begin = 0, end = 1,\n                       option = \"magma\") +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25),\n    axis.text.y = element_text(size = 7),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    strip.text = element_markdown(size = 10, face = \"bold\"),\n    strip.background = element_rect(size = 1, color = \"blaCk\", fill = NA),\n    plot.margin = unit(c(0, 0.1, 0.1, 0.1), \"cm\")\n  ) + \n  scale_y_discrete(limits = rev) + \n  facet_grid(~ strip_label, scales = \"free\")\n\n```\n\n## Reading in the best BLAST hit info:\n\n```{r}\namoA_organism_info <- readxl::read_xlsx(\"data/amoa_mfp_qpcr_org_accessions.xlsx\", sheet = 5) %>% \n  select(-c(contains(c(\"forward\", \"reverse\", \"notes\")))) \n```\n\nCounts of best BLAST hits:\n\n```{r}\namoA_organism_info %>% \n  count(best_blast_hits, sort = TRUE) \n\n```\n\n\n## Creating a phyloseq object\n\n\n```{r other-error-chunk, message=FALSE, warning=FALSE}\namoa_tax_table <- amoA_organism_info %>% \n  select(array_name, best_blast_hits) %>% \n  column_to_rownames(var = \"array_name\") %>% \n  tax_table()\n\nrownames(amoa_tax_table) <- amoA_organism_info$array_name\n```\n\n\n```{r error-chunk}\nps <- phyloseq(\n  otu_table(amoA_presence_absence %>% column_to_rownames(var = \"sample_id\"), taxa_are_rows = FALSE),\n  sample_data(metadata),\n  amoa_tax_table\n)\n\n```\n\n## Richness analysis\n\nHow does observed richness and evenness change with treatment level? This is a modified diversity function\nthat does a bunch of nice stuff that `phyloseq::estimate_richness` doesn't do.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Estimate richness function\"\nestimate_richness_mod <- function(physeq, split=TRUE, measures=NULL){\n  \n\n  if( !split ){\n    OTU <- taxa_sums(physeq)        \n  } else if( split ){\n    OTU <- as(otu_table(physeq), \"matrix\")\n    if( taxa_are_rows(physeq) ){ OTU <- t(OTU) }\n  }\n  \n\n  renamevec = c(\"Observed\", \"Chao1\", \"ACE\", \"Shannon\", \"Pielou\", \"Simpson\", \"InvSimpson\", \"SimpsonE\", \"Fisher\")\n  names(renamevec) <- c(\"S.obs\", \"S.chao1\", \"S.ACE\", \"shannon\", \"pielou\", \"simpson\", \"invsimpson\", \"simpsone\", \"fisher\")\n\n  if( is.null(measures) ){\n    measures = as.character(renamevec)\n  }\n\n  if( any(measures %in% names(renamevec)) ){\n    measures[measures %in% names(renamevec)] <- renamevec[names(renamevec) %in% measures]\n  }\n  \n\n  if( !any(measures %in% renamevec) ){\n    stop(\"None of the `measures` you provided are supported. Try default `NULL` instead.\")\n  }\n  \n\n  outlist = vector(\"list\")\n\n  estimRmeas = c(\"Chao1\", \"Observed\", \"ACE\")\n  if( any(estimRmeas %in% measures) ){\n    outlist <- c(outlist, list(t(data.frame(estimateR(OTU)))))\n  }\n  if( \"Shannon\" %in% measures ){\n    outlist <- c(outlist, list(shannon = diversity(OTU, index=\"shannon\")))\n  }\n  if( \"Pielou\" %in% measures){\n    #print(\"Starting Pielou\")\n    outlist <- c(outlist, list(pielou = diversity(OTU, index = \"shannon\")/log(estimateR(OTU)[\"S.obs\",])))\n  }\n  if( \"Simpson\" %in% measures ){\n    outlist <- c(outlist, list(simpson = diversity(OTU, index=\"simpson\")))\n  }\n  if( \"InvSimpson\" %in% measures ){\n    outlist <- c(outlist, list(invsimpson = diversity(OTU, index=\"invsimpson\")))\n  }\n  if( \"SimpsonE\" %in% measures ){\n\n    outlist <- c(outlist, list(simpsone = diversity(OTU, index=\"invsimpson\")/estimateR(OTU)[\"S.obs\",]))\n  }\n  if( \"Fisher\" %in% measures ){\n    fisher = tryCatch(fisher.alpha(OTU, se=TRUE),\n                      warning=function(w){\n                        warning(\"phyloseq::estimate_richness: Warning in fisher.alpha(). See `?fisher.fit` or ?`fisher.alpha`. Treat fisher results with caution\")\n                        suppressWarnings(fisher.alpha(OTU, se=TRUE)[, c(\"alpha\", \"se\")])\n                      }\n    )\n    if(!is.null(dim(fisher))){\n      colnames(fisher)[1:2] <- c(\"Fisher\", \"se.fisher\")\n      outlist <- c(outlist, list(fisher))\n    } else {\n      outlist <- c(outlist, Fisher=list(fisher))\n    }\n  }\n  out = do.call(\"cbind\", outlist)\n\n  namechange = intersect(colnames(out), names(renamevec))\n  colnames(out)[colnames(out) %in% namechange] <- renamevec[namechange]\n\n  colkeep = sapply(paste0(\"(se\\\\.){0,}\", measures), grep, colnames(out), ignore.case=TRUE)\n  out = out[, sort(unique(unlist(colkeep))), drop=FALSE]\n\n  out <- as.data.frame(out)\n  return(out)\n}\n```\n\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Calculate richnesses for sample groups\"\nmetrics <- c(\"Observed\", \"Shannon\")\nrichness <- estimate_richness_mod(ps, measures = metrics) %>% \n  rownames_to_column(var = \"sample_id\") %>% \n  mutate(sample_id = str_sub(sample_id, start = 2)) \n\nrichness <- left_join(sample_data(ps) %>% data.frame() %>% rownames_to_column(var = \"sample_id\"), richness) %>% \n  pivot_longer(cols = Observed:Shannon, names_to = \"Metric\", values_to = \"Value\")\n```\n\n## Statistical tests\n\n### Significance test of fertilization level on richness.\n\n```{r}\n(sig_rich_fert <- kruskal.test(Value ~ fert_level, data = richness %>% filter(Metric == \"Observed\")))\n```\n\nThe `p-value < 0.001` gives us strong statistical evidence that richness is significantly different between \nfertilization treatment groups.\n\n\n### Significance test of fertilization level on richness\n\n```{r}\n(sig_even_fert <- kruskal.test(Value ~ fert_level, data = richness %>% filter(Metric == \"Shannon\")))\n```\n\nThe `p-value < 0.001` gives us strong statistical evidence that Shannon diversity is significantly different between \nfertilization treatment groups.\n\n## Making nice plots for stat differences\n\nStandard deviations, mean\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Generate alpha diversity plots\"\nsummaries <- richness %>% \n  group_by(Metric, fert_level) %>% \n  summarize(mean_val = mean(Value), \n            sd_val = sd(Value),\n            n = n(),\n            .groups = \"drop\") %>% \n  mutate(se = abs((sd_val / sqrt(n)) * qt(0.025, n - 1) )) %>% \n  mutate(ymax = mean_val + se, \n         ymin = mean_val - se) \n\nthis_annotation <- data.frame(\n  Metric = c(\"Observed\", \"Shannon\"),\n  lab = c(\"***\", \"***\"),\n  x = 1.5,\n  y = c(50 + 5 + 2, 4 + 0.5),\n  lineheights = c(50 + 5, 4 + 0.25)\n)\n\nsummaries %>%  \n  ggplot(aes(fert_level, mean_val, fill = fert_level)) + \n  geom_col(color = \"black\", size = 1) +\n  facet_wrap(~ Metric, scales = \"free_y\") + \n  theme(\n    legend.position = \"none\",\n    strip.background = element_blank(),\n    axis.title.y = element_blank(),\n    strip.placement = \"outside\",\n    plot.title = element_text(hjust = 0.5),\n    strip.text.y = element_text(face = \"bold\", size = 10),\n    strip.text = element_text(face = \"bold\", size = 10),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray90\", linetype = \"dashed\"),\n    axis.ticks = element_blank(),\n    panel.border = element_rect(color = \"black\", size = 1, fill = \"NA\")\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) + \n  geom_errorbar(aes(ymin = ymin, ymax = ymax, width = 0.5)) + \n  geom_text(\n    data = this_annotation,\n    aes(x = x, y = y, label = lab),\n    inherit.aes = FALSE,\n    size = 5\n    ) + \n  geom_segment(data = this_annotation,\n               aes(x = 1,\n                   xend = 2, \n                   y = lineheights,\n                   yend = lineheights),\n               inherit.aes = FALSE) + \n  labs(\n    x = \"Fertilization Level\\n(*** = p < 0.001 by Kruskal Wallis)\",\n    title = \"Alpha diversity metrics by fertilization level\"\n    \n  )\n\n```\n\n## Beta diversity\n\nWe'll start beta diversity analysis off by doing an ADONIS/PERMANOVA to determine if \ntreatment centroids/treatment variations are different between groups. \n\n```{r}\n#| warning: false\n#| message: false\ndis <- vegdist(otu_table(ps))\ngroups <- sample_data(ps)$fert_level\nmod <- betadisper(dis, groups)\nanova(mod)\n```\n\nSince `p <<<< 0.0001`, there is strong evidence that the overall community compositions\nare significantly different (treatment centroid, distance to centroid, community variation)\nbetween the two groups. W can visualize this with a 1 SD ellipse:\n\n```{r}\nplot(mod, ellipse = TRUE, hull = FALSE) \n```\n\nWe see that there is clear separation between the two treatment centroids. Let's do some more analysis on the \ndistance-to-centroids that we're seeing:\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Distance-to-centroid plots\"\nbetadistances <- data.frame(\n  time_frame = mod$group,\n  distance = mod$distances\n)\n\nbetadistances %>% \n  ggplot(aes(time_frame, distance)) + \n  geom_boxplot(size = 1, outlier.shape = NA) + \n  geom_jitter(aes(fill = time_frame), size = 5, shape = 21, width = 0.2) +\n  theme(\n    legend.position = \"none\",\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_blank(),\n    plot.title = element_text(size = 17),\n    plot.subtitle = element_text(size = 9),\n    axis.ticks.length = unit(0.25, \"cm\"),\n    axis.ticks.x = element_blank(),\n    axis.text.x = element_text(face = \"bold\", angle = 0, size = 12),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(size = 14, face = \"bold\"),\n    \n  ) + \n  labs(\n    color = \"\",\n    y = \"Distance to centroid\"\n  ) +\n  ggsignif::geom_signif(\n    map_signif_level = TRUE,\n    comparisons = list(c(\"0\", \"336\")),\n    test = \"t.test\",\n    step_increase = 0.1,\n    color = \"black\",\n    size = 1,\n    textsize = 5,\n    tip_length = 0\n  )\n```\n\n\nThe significance bar is coming from the PERMANOVA test we did above. We see that there is actually\nless beta diversity (as meaasured by distance-to-centroid) in the fertilized group than in the non-\nfertilized group. We'll see another visualization backing this up in the next section:\n\n## Composition\n\nLet's visualize the composition of the communities, separated by fertilization. We'll start with\nraw counts - how many times was that best BLAST hit seen in that sample?\n\n```{r}\ncomp_barplot(ps, \"ta1\",\n             facet_by = \"fert_level\",\n             sample_order =  \"default\",\n             tax_transform_for_plot = \"identity\") +\n  coord_flip() + \n  labs(\n    title = \"Sample composition by fertilization level\",\n    subtitle = \"(raw counts)\"\n  ) + \n  theme(\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(margin = margin(r = -7)),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 10),\n    strip.text = element_text(size = 10, face = \"bold\")\n  ) +\n  guides(\n    fill = guide_legend(title = \"Best BLAST hit\", reverse = TRUE)\n  )\n\n```\n\nWe see that overall the fertilized group appears to have more richness in it.\n\nHow about sample composition? IE, relative abundances?\n\n```{r}\ncomp_barplot(ps, \"ta1\",\n             facet_by = \"fert_level\",\n             sample_order =  \"default\") +\n  coord_flip() + \n  labs(\n    title = \"Sample composition by fertilization level\",\n    subtitle = \"(relative abundance)\"\n  ) + \n  theme(\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(margin = margin(r = -7)),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 10),\n    strip.text = element_text(size = 10, face = \"bold\")\n  ) +\n  guides(\n    fill = guide_legend(title = \"Best BLAST hit\", reverse = TRUE)\n  )\n```\n\nTwo big things pop out:\n\n* Species distribution is more even in the fertilized group. This makes sense given previous results\nshowing that Shannon entropy is higher and beta diversity is lower in the fertilized group. You can also \nsee that the communities just look more like each other in the fertilized group, which manifests in shorter\ndistance-to-centroids/lower community variation.\n* There's more green in the fertilized group, suggesting that Nitrosolobus multiformus and Nitrosospira sp. En13 abundances are significantly affected by fertilization addition.\n\n## Statistics on a best BLAST hit level\n\nThe next chunk is just doing some data transformation stuff to count the number of times\neach organism was seen in each sample in preparation for the statistical analysis.\n\n```{r}\n#| message: false\n#| warning: false\npa_count <- ps %>% \n  otu_table() %>%\n  data.frame %>%\n  rownames_to_column(var = \"sample_id\") %>% \n  pivot_longer(starts_with(\"amoA\")) \n\n\norg_table <- tax_table(ps) %>% \n  data.frame %>% \n  rownames_to_column(var = \"name\") %>% \n  rename(bbh = ta1) %>% \n  mutate(cleaned_names = janitor::make_clean_names(bbh))\n\nbbh_sample_counts <- left_join(pa_count, org_table, by = \"name\") %>%\n  group_by(sample_id, bbh) %>% \n  summarize(value = sum(value)) %>% \n  pivot_wider(names_from = \"bbh\", values_from = value)\n\nbbh_level_counts <- left_join(bbh_sample_counts,\n          sample_data(ps) %>% \n            data.frame %>% \n            rownames_to_column(var = 'sample_id') %>% \n            right_join(bbh_sample_counts)\n) %>% \n  ungroup()\n  \n```\n\nHere, we're preparing formulas to feed to a `lapply` function to perform a Kruskal-Wallis test on \nall of the organisms.\n\n```{r}\n#| warning: false\n#| message: false\nformulae <- lapply(colnames(bbh_sample_counts %>% select(-sample_id) %>% janitor::clean_names()) , function(x) as.formula(paste0(x, \" ~ fert_level * crop * timepoint * addition\")))\n\nformulae[[1]] <- NULL\n\nres <- lapply(formulae, function(x) broom::tidy(aov(x, data = bbh_level_counts %>% janitor::clean_names())))\nnames(res) <- format(formulae)\nnames(res) <- lapply(names(res), function(x) str_split(x, \"~\")[[1]][1]) %>% unlist()\n\nanova_results.counts <- lapply(seq_along(res), function(i) res[[i]] %>% mutate(gene = names(res)[[i]])) %>% \n  bind_rows() %>% \n  filter(term != \"Residuals\") %>% \n  mutate(gene = str_trim(gene))\n```\n\nVisualizing the results again:\n\n```{r}\nanova_results.counts %>%\n  left_join(org_table, by = c(\"gene\" =\"cleaned_names\")) %>%\n  mutate(sig = case_when(\n    p.value < 0.05 & p.value > 0.01 ~ \"*\",\n    p.value < 0.01 & p.value > 0.001 ~ \"**\",\n    p.value < 0.001 ~ \"***\",\n    TRUE ~ \"NS\"\n  )) %>% \n  ggplot(aes(term, bbh, fill = sig)) + \n  geom_tile(color = \"black\") + \n  labs(y = \"\",\n       x = \"\",\n       title = \"Summary of ANOVA results\",\n       fill = \"Significance \") + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n    axis.text.y = element_text()\n  ) + \n  scale_fill_viridis_d(option = \"magma\", direction = -1) + \n  scale_y_discrete(limits = rev) +\n  coord_equal() \n```\n\nWe see the same pattern at the organism level as when we did this at the gene level:\nfertilization level is by far the most significant factor affecting Presence/Absence of \norganisms."
  },
  {
    "href": "docs\\second.html#learning-more",
    "title": "A qmd with only Python",
    "section": "Learning more",
    "text": "To learn more about using interactive documents with Quarto, see the Interactive Docs section of the Quarto documentation.\n\n\nSource Code\n---\ntitle: \"A qmd with only Python\"\nformat: html\n---\n\nThis is a pure Python qmd document. Since there are no R code chunks, it is executed via the Jupyter kernel. Because it's written in a `qmd` file, all of the Rmarkdown/knitr functionality you're used to can be used here. Here is some example code below.\n\n\n## Adding days per month from date range to a dataframe\n\nSuppose you have a dataset with a column of start dates and column of end dates. For example:\n\n```{python}\nimport pandas as pd\nimport calendar\n\ndate_df = pd.DataFrame({\n    \"START_TM\": ['2/15/2010', '2/15/2010', '3/16/2010'],\n    \"END_TM\": ['4/18/2010', '2/18/2010', '5/20/2010']\n})\ndate_df[\"START_TM\"] = date_df[\"START_TM\"].astype('datetime64')\ndate_df[\"END_TM\"] = date_df[\"END_TM\"].astype('datetime64')\ndate_df\n```\n\nOur goal is to count the number of days in each month this range of dates falls over.\n\nWe start by adding columns for each month:\n\n```{python}\nmonths = {calendar.month_name[i]:[0 for _ in range(date_df.shape[0])] for i in range(1, 13)}\nfor m in months:\n    date_df[m] = [0 for _ in range(date_df.shape[0])]\ndate_df\n```\n\n### Helper functions\n\n```{python}\ndef insert_days_per_month(outer_row):\n    dpm = days_per_month(outer_row)\n    for index, inner_row in dpm.iterrows():\n        outer_row[inner_row['Month']] = inner_row['NumDays']\n    return(outer_row)\n\ndef days_per_month(row):\n    s = pd.Series(index = pd.date_range(row[0], row[1]))[1: ] \n    days_in_month = s.resample('MS').size().to_period('m').\\\n    rename_axis('Month').reset_index(name = 'NumDays')\n    days_in_month['Month'] = days_in_month['Month'].apply(\n        lambda x: calendar.month_name[x.month])\n    return(days_in_month)\n```\n\nWe can get the desired result with apply:\n\n```{python}\n#| warning: false\ndate_df = date_df.apply(lambda x: insert_days_per_month(x), axis = 1)\ndate_df\n```\n\n## Interactive Widgets\n\nQuarto has support for interactive documents. Supported formats include:\n\n-   JavaScript: Observable JS\n-   R: Shiny\n-   Python: Jupyter Widgets are all supported, such as IPyLeaflet and Plotly\n\n\n\nHere are some examples:\n\n## IPyLeaflet\n\n```{python}\nfrom ipyleaflet import Map, Marker\n\ngood_eats = {\n  \"Cham Soot Gol\": (33.772819, -117.9694484),\n  \"The Boiling Crab\": (33.6996179, -117.8905689),\n  \"Tan Hoang Huong\": (33.7446965, -117.9629173)\n}\n\ncham_soot_gol = Map(center=good_eats[\"Cham Soot Gol\"], scroll_wheel_zoom=True)\nfor place in good_eats:\n  cham_soot_gol.add_layer(Marker(location=good_eats[place], title=place))\ncham_soot_gol\n```\n\n## Plotly\n\n```{python}\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n                 color=\"species\", \n                 marginal_y=\"violin\", marginal_x=\"box\", \n                 trendline=\"ols\", template=\"simple_white\")\nfig.show()\n```\n\n## Learning more\n\nTo learn more about using interactive documents with Quarto, see the [Interactive Docs section](https://quarto.org/docs/interactive/) of the Quarto documentation."
  }
]